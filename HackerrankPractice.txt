-- Revising Aggregations - The Count Function

select distinct count (*) from CITY where POPULATION > 100000;

select sum(POPULATION) from CITY where DISTRICT = 'California';

select avg(POPULATION) from CITY where DISTRICT = 'California';

select round(avg(POPULATION)) from CITY;

select sum(POPULATION) from CITY where COUNTRYCODE = 'JPN';

select max(POPULATION) - min(POPULATION) as DIFF from CITY;

select * from CITY where COUNTRYCODE = 'USA' and POPULATION > 100000;

-- THE PADS Challenge

select concat(concat(NAME,'('),concat(SUBSTR(OCCUPATION,1,1),')')) as NAME from OCCUPATIONS  order by NAME;
select 'There are a total of ',count(*) as C,concat(lower(OCCUPATION),'s.') as OCTOTAL from OCCUPATIONS group by OCCUPATION order by C, OCTOTAL ; 


-- Weather observation

select round(sum(lat_n),2) as lat, round(sum(long_w),2) as lon from STATION;

select round(sum(lat_n),4) from STATION where lat_n between 38.788 and 137.2345;

select round(max(lat_n),4) from STATION where lat_n < 137.2345;

select round(long_w,4) from STATION where lat_n = (select max(lat_n) from STATION where lat_n< 137.2345);

select round(sqrt(power(max(lat_n)-min(lat_n),2) + power(max(long_w)-min(long_w),2)), 4) from station;

-- THE Blunder Challenge

SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES;

-- JOINS

select sum(city.POPULATION) from city inner join COUNTRY on CITY.CountryCode = COUNTRY.Code where COUNTRY.continent = 'Asia';

select city.name from city inner join COUNTRY on CITY.CountryCode = COUNTRY.Code where COUNTRY.continent = 'Africa';

select COUNTRY.Continent, floor(avg(CITY.POPULATION)) from COUNTRY inner join CITY on CITY.CountryCode = COUNTRY.Code group by COUNTRY.Continent;

-- OFFSETS

select (salary * months) as earn, count(*) from Employee group by earn order by earn desc limit 1;

-- Print right triangle decreasing

DECLARE @var int              
SELECT @var = 5               
WHILE @var > 0                
BEGIN                         
PRINT replicate('* ', @var)   
SET @var = @var - 1           
END                           

-- Print right triangle increasing

DECLARE @var int                  -- Declare  
SELECT @var = 1                   -- initialization  
WHILE @var <= 5                   -- Condition 
BEGIN                             -- Begin 
PRINT replicate('* ', @var)       -- Print 
SET @var = @var + 1               -- Set 
END                               -- end 


-- Pivoting

select doctor,professor,singer,actor from (select * from (select Name, occupation, (ROW_NUMBER() OVER (PARTITION BY occupation ORDER BY name)) as row_num from occupations order by name asc) pivot ( min(name) for occupation in ('Doctor' as doctor,'Professor' as professor,'Singer' as singer,'Actor' as actor)) order by row_num);